plugins {
    id "java"
}


apply plugin: 'java'




// https://docs.gradle.org/current/userguide/managing_dependency_configurations.html
configurations {
    jvarkit1
}
 
repositories {
   mavenCentral()
}

final String htsjdk_version = "2.18.0"

dependencies {
	jvarkit1 group: 'com.github.samtools', name: 'htsjdk', version: htsjdk_version
	jvarkit1 group: 'com.beust', name: 'jcommander', version: '1.72'
}
 
@groovy.transform.Field
String jvarkitDir = "/home/lindenb/src/jvarkit-git" 
@groovy.transform.Field
String jvarkitPackage =  "com.github.lindenb.jvarkit" 
 
def getGitHash = { ->
    try {
    def stdout = new java.io.ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
    } catch(Exception err) {
	return err.getMessage()
	}
}


class JvarkitApp
	{
	final def proj;
	final String name;
	String mainClass ="";
	String sourceCompatibility = "1.8"
	String targetCompatibility = "1.8"
	def configurations = new HashSet<>();
	
	JvarkitApp(final def proj,final String name,final String mainClass)
		{
		this.proj = proj;
		this.name = name;
		this.mainClass =  mainClass;
		configurations.add("jvarkit1")
		}
	String getMainClass() {
		return mainClass;
		}
	String getMainSource() {
		String s = getMainClass();
		int dollar = s.indexOf('$');
		if(dollar!=-1) s=s.substring(0,dollar);
		return mainClass.replace('.','/')+".java";
		}
	
	def getMainSourceFile() {
		return proj.jvarkitDir+"/src/main/java/"+getMainSource();
		}
	def getTestSourceFile() {
		return proj.jvarkitDir+"/src/test/java/"+getMainSource();
		}
	
	}



class BiostarApp extends JvarkitApp
	{
	BiostarApp(def owner,int x)
		{
		super(owner, "biostar"+x ,   owner.jvarkitPackage +".tools.biostar.Biostar"+x );
		}
	}


final List<JvarkitApp> apps = new ArrayList<>();
apps.add(new JvarkitApp(this,"vcfhead","${jvarkitPackage}.tools.misc.VcfHead"));
apps.add(new BiostarApp(this,33));

System.err.println("#A");

Task compile_annotproc =  tasks.create(name: "annotproc.compile", type:  JavaCompile) {
	description = "compile Annotation processor"
	
	source = [ file("${jvarkitDir}/src/main/java/com/github/lindenb/jvarkit/annotproc/JVarkitAnnotationProcessor.java")]
	destinationDir = file("${projectDir}/tmp1")
	classpath = files("${jvarkitDir}/src/main/java") 
	dependencyCacheDir = file(".")
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"
	options.encoding = 'UTF-8'
	options.listFiles = true
	options.debug = true
	options.warnings = true
	options.deprecation  = true
	options.sourcepath = files("${jvarkitDir}/src/main/java")
	
	doFirst {
		ant.mkdir(dir : "${projectDir}/tmp1/META-INF/services");
		ant.echo(message: "com.github.lindenb.jvarkit.annotproc.JVarkitAnnotationProcessor", file:"${projectDir}/tmp1/META-INF/services/javax.annotation.processing.Processor");
		}
	
	}

Task jar_annotproc =  tasks.create(name: "annotproc.jar", type:  Jar) {
		description = "package annotproc"
		destinationDir = file("${projectDir}/dist")
		archiveName = "annotproc.jar"
		from { file("${projectDir}/tmp1") }
		with jar
		doFirst {
			ant.mkdir(dir : "${projectDir}/dist");
			ant.echo (message : "PROJECT DIR IS ${projectDir}");
			}
		doLast {
			ant.delete(dir : "${projectDir}/tmp1" , verbose : true)
			}
	}

jar_annotproc.dependsOn compile_annotproc

for(final JvarkitApp app: apps) {
	
	
	Task t2 =  tasks.create(name: app.name+"-compile", type:  JavaCompile) {
		description = "compile "+app.name
		
		source = [ app.getMainSourceFile() ]
		destinationDir = file("${projectDir}/tmp")
		classpath = files("${jvarkitDir}/src/main/java") 
		app.configurations.each{ classpath += configurations[it]}
		dependencyCacheDir = file(".")
		sourceCompatibility = app.sourceCompatibility
		targetCompatibility = app.targetCompatibility
		options.encoding = 'UTF-8'
		options.listFiles = true
		options.debug = true
		options.warnings = true
		options.deprecation  = true
		options.sourcepath = files("${jvarkitDir}src/main/java")
		
		doFirst {
			ant.echo(message:"#Compiling "+app.name+" "+app.getMainSource()+" ${jvarkitDir}")
			ant.mkdir(dir : "${projectDir}/tmp/META-INF");
			}
			
		}
	
	t2.dependsOn jar_annotproc
	
	Task t3 = tasks.create(name: app.name+"-jar",type: Jar) {
		description = "package "+app.name
		manifest {
			attributes 'Implementation-Title': 'Gradle Jar File Example',  
				'Implementation-Version': "1.0",
				'Main-Class': app.getMainClass()
		    	}
		 baseName = app.name + '-all'
		 from {  zipTree(file("${projectDir}/tmp"))  }
		 with jar
		 
		 
		doFirst {
			ant.echo(message:"#packaging "+app.name)

			}
		}
	
	t3.dependsOn t2
	}

//println tasks.getByPath('hello').path
